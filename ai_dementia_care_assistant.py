# -*- coding: utf-8 -*-
"""AI DEMENTIA CARE ASSISTANT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t20XBgiBR2EmdrsjGh4BE9QqrFfFsx8V
"""



import os
import time
import platform
import random
import threading

import os

def speak(text):
    os.system(f"say '{text}'")

speak("Hello! This is a test message.")

class DementiaCareAssistant:
    def __init__(self):
        self.reminders = []
        self.os_name = platform.system()  # Detect OS

    def speak(self, text):
        """Speak text using OS-specific commands"""
        if self.os_name == "Windows":
            os.system(f'powershell -c "Add-Type –AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak(\'{text}\');"')
        elif self.os_name == "Darwin":  # macOS
            os.system(f"say '{text}'")
        elif self.os_name == "Linux":
            os.system(f"espeak '{text}'")

    def set_reminder(self, message, delay):
        """Set a reminder after a delay (in seconds)"""
        self.reminders.append((message, time.time() + delay))
        self.speak(f"Reminder set: {message} in {delay} seconds.")

    def check_reminders(self):
        """Check and announce reminders"""
        current_time = time.time()
        for reminder in self.reminders[:]:  # Iterate over a copy of the list
            message, remind_time = reminder
            if current_time >= remind_time:
                self.speak(f"Reminder: {message}")
                print(f"Reminder: {message}")
                self.reminders.remove(reminder)  # Remove from list

    def navigate(self, location):
        """Provide simple navigation instructions"""
        directions = {
            "kitchen": "Walk straight and take a left to reach the kitchen.",
            "bathroom": "Go down the hallway and turn right to find the bathroom.",
            "bedroom": "Head towards the end of the hall, and your bedroom is on the left.",
            "living room": "Walk straight, and you will enter the living room."
        }
        response = directions.get(location.lower(), "I don't know that location.")
        self.speak(response)
        return response

    def run(self):
        """Main loop to interact with the user"""
        self.speak("Hello! I am your Dementia Care Assistant. How can I help?")
        while True:
            user_input = input("\nEnter command (reminder, navigate, exit): ").lower()
            if "reminder" in user_input:
                message = input("What should I remind you about? ")
                delay = int(input("In how many seconds? "))
                self.set_reminder(message, delay)
            elif "navigate" in user_input:
                location = input("Where do you want to go? ")
                print(self.navigate(location))
            elif "exit" in user_input:
                self.speak("Goodbye! Stay safe.")
                break
            else:
                self.speak("Sorry, I didn't understand that.")

            self.check_reminders()  # Keep checking for reminders

if __name__ == "__main__":
    assistant = DementiaCareAssistant()
    assistant.run()

class DementiaCareAssistant:
    def __init__(self):
        self.reminders = []
        self.os_name = platform.system()  # Detect OS
        self.is_fall_detected = False  # Flag for fall detection

    def speak(self, text):
        """Speak text using OS-specific commands"""
        if self.os_name == "Windows":
            os.system(f'powershell -c "Add-Type –AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak(\'{text}\');"')
        elif self.os_name == "Darwin":  # macOS
            os.system(f"say '{text}'")
        elif self.os_name == "Linux":
            os.system(f"espeak '{text}'")

    def set_reminder(self, message, delay):
        """Set a reminder after a delay (in seconds)"""
        self.reminders.append((message, time.time() + delay))
        self.speak(f"Reminder set: {message} in {delay} seconds.")

    def check_reminders(self):
        """Check and announce reminders"""
        current_time = time.time()
        for reminder in self.reminders[:]:  # Iterate over a copy of the list
            message, remind_time = reminder
            if current_time >= remind_time:
                self.speak(f"Reminder: {message}")
                print(f"Reminder: {message}")
                self.reminders.remove(reminder)  # Remove from list

    def fall_detection(self):
        """Simulate fall detection"""
        while True:
            # Simulate a fall detection event (for demonstration purposes)
            fall_event = random.choice([True, False])  # Random fall detection simulation
            if fall_event and not self.is_fall_detected:
                self.is_fall_detected = True
                self.speak("Fall detected. Are you okay? Assistance is on the way.")
                print("Fall detected!")
                time.sleep(5)  # Delay before resetting the fall detection flag
                self.is_fall_detected = False
            time.sleep(1)  # Check every second

    def navigate(self, location):
        """Provide simple navigation instructions"""
        directions = {
            "kitchen": "Walk straight and take a left to reach the kitchen.",
            "bathroom": "Go down the hallway and turn right to find the bathroom.",
            "bedroom": "Head towards the end of the hall, and your bedroom is on the left.",
            "living room": "Walk straight, and you will enter the living room."
        }
        response = directions.get(location.lower(), "I don't know that location.")
        self.speak(response)
        return response

    def run(self):
        """Main loop to interact with the user"""
        self.speak("Hello! I am your Dementia Care Assistant. How can I help?")
        threading.Thread(target=self.fall_detection, daemon=True).start()  # Run fall detection in background

        while True:
            user_input = input("\nEnter command (reminder, navigate, exit): ").lower()
            if "reminder" in user_input:
                message = input("What should I remind you about? ")
                delay = int(input("In how many seconds? "))
                self.set_reminder(message, delay)
            elif "navigate" in user_input:
                location = input("Where do you want to go? ")
                print(self.navigate(location))
            elif "exit" in user_input:
                self.speak("Goodbye! Stay safe.")
                break
            else:
                self.speak("Sorry, I didn't understand that.")

            self.check_reminders()  # Keep checking for reminders

if __name__ == "__main__":
    assistant = DementiaCareAssistant()
    assistant.run()